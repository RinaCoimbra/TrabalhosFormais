options
{
  JDK_VERSION = "1.5";
  static = true; 
  //LOOKAHEAD = 2;
}

PARSER_BEGIN(AWK)

public class AWK {
  public static void main(String args []) throws ParseException  {
    new AWK(System.in);
    System.out.println("Reading from standard input...");
    
    int ok = AWK.Begin();
    if (ok == 1) System.out.println("Ok!");
  }
}

PARSER_END(AWK)

SKIP :
{ " " | "\r" | "\t" | "\n" }

// -----------------------------------------------
// Tokens
// -----------------------------------------------

TOKEN :
{
  // Special patterns

    < BEGINFUNCAO: "BEGIN" >
  | < ENDFUNCAO:   "END" >

  // Comments

  | <COMMENT: ["#"](~["\n"])+>

  // Scope 

  | < ESCOPOFUNCAOB: "{"  >
  | < ESCOPOFUNCAOE: "}" >
  | < ESCOPOPARAMB: "(" >
  | < ESCOPOPARAME: ")" >

  // Parameters

  | < PARAM: "param" >

  // Actions

  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >

  // INTEIROS E FLOATS
  | < INT: (["0"-"9"])+>
  | < FLOAT: (["0"-"9"])+("." ((["0"-"9"])+))?>
  | < VAR:["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])*>

  // Expressoes
  | < QUESTION: "?">
  | < COLON: ":">
  | < LOGICALEXPSYMBOL: ("&&"|"||" | "==" | "~!" | "~" | ">=" | ">" | "!=" | "<=" | "<" | "-" | "+" | "%" | "/" | "*" | "^") >
  | < UNARYEXPSYMBOL: ("++" | "--")>
  | <UNARYEXPSYMBOLBEFORE: ("+" | "-" | "!")>
}

// -----------------------------------------------
// Special patterns
// -----------------------------------------------

int Begin():    {}
{    
  (Comment())* <BEGINFUNCAO> EscopoFuncao() [EscopoFuncao()] [<ENDFUNCAO> EscopoFuncao()] <EOF>{ return 1; }
}

// -----------------------------------------------
// Comments
// -----------------------------------------------

void Comment(): {}
{
  <COMMENT>
}

// -----------------------------------------------
// Parameters
// -----------------------------------------------

void Parameter(): {}
{
  <PARAM>
}

// -----------------------------------------------
// Scope
// -----------------------------------------------

void EscopoParam(): {}
{
  <ESCOPOPARAMB> (Parameter())+ <ESCOPOPARAME>
}

void EscopoFuncao(): {}
{
  <ESCOPOFUNCAOB> (Comment())* (If() | While())* <ESCOPOFUNCAOE> (Comment())*
}

// -----------------------------------------------
// Actions
// -----------------------------------------------

void If(): {}
{
  <IF> <ESCOPOPARAMB> Expression() <ESCOPOPARAME> (EscopoFuncao() | <PARAM>) [<ELSE> (EscopoFuncao()| <PARAM>)]
}

void While(): {}
{
  <WHILE> EscopoParam() EscopoFuncao()
}

// -----------------------------------------------
// Expressions
// -----------------------------------------------

void Expression(): {}
{
  BinaryExp() [<QUESTION> BinaryExp() <COLON> BinaryExp()]
}

void BinaryExp(): {}
{
   UnaryExp() [<LOGICALEXPSYMBOL> UnaryExp()]
}

void UnaryExp(): {}
{
  [<UNARYEXPSYMBOLBEFORE>] Parenthesis() [<UNARYEXPSYMBOL>]
}

void Parenthesis(): {}
{
  (<ESCOPOPARAMB> Expression() <ESCOPOPARAME> | <INT> | <VAR> | <FLOAT>)
}

