options
{
  JDK_VERSION = "1.5";
  static = true; 
  //LOOKAHEAD = 2;
}

PARSER_BEGIN(AWK)

public class AWK {
  public static void main(String args []) throws ParseException  {
    new AWK(System.in);
    System.out.println("Reading from standard input...");
    
    int ok = AWK.Start();
    if (ok == 1) System.out.println("Ok!");
  }
}

PARSER_END(AWK)

SKIP :
{ " " | "\r" | "\t" | "\n" | <["#"](~["\n"])+> }

// -----------------------------------------------
// Tokens
// -----------------------------------------------

TOKEN :
{
  // Special patterns

    < BEGINFUNCAO: "BEGIN" >
  | < ENDFUNCAO:   "END" >

  // Scope 

  | < ESCOPOFUNCAOB: "{"  >
  | < ESCOPOFUNCAOE: "}" >
  | < ESCOPOPARAMB: "(" >
  | < ESCOPOPARAME: ")" >

  // Actions

  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >

  // INTEIROS E FLOATS
  | < INT: (["0"-"9"])+>
  | < FLOAT: (["0"-"9"])+("." ((["0"-"9"])+))?>
  | < VAR:["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])*>

  // Expressoes
  | < QUESTION: "?">
  | < COLON: ":">
  | < ASSIGNMENTEQ : "=">
  | < ASSIGNMENTEP : "+=">
  | < ASSIGNMENTEL : "-=">
  | < ASSIGNMENTEM : "*=">
  | < ASSIGNMENTDIV : "/=">
  | < ASSIGNMENTEMOD : "%=">
  | < ASSIGNMENTELEV: "^=">
  | < LOGICALOR: "||">
  | < LOGICALAND: "&&">
  | < OPVETORIN: "in">
  | < OPLESS: "<">
  | < OPMORE: ">">
  | < OPLESSEQ: "<=">
  | < OPMOREEQ: ">=">
  | < OPDIFF: "!=">
  | < EQEQ: "=="> 
  | < LOGICALEXPSYMBOL: ("&&" | "==" | "~!" | "~" | ">=" | ">" | "!=" | "<=" | "<" | "-" | "+" | "%" | "/" | "*" | "^") >
  | < UNARYEXPSYMBOL: ("++" | "--")>
  | <UNARYEXPSYMBOLBEFORE: ("+" | "-" | "!")>
}

// -----------------------------------------------
// Special patterns
// -----------------------------------------------

int Start(): {}
{
  (Begin() | Middle() | End()) <EOF> { return 1; }
}

void Begin():    {}
{    
  (<BEGINFUNCAO> EscopoFuncao())+ [Middle() | End()]
}

void Middle():    {}
{    
  (EscopoFuncao())+ [Begin() | End()]
}

void End():    {}
{    
  (<ENDFUNCAO> EscopoFuncao())+ [Begin() | Middle()]
}

// -----------------------------------------------
// Scope
// -----------------------------------------------

void EscopoParam(): {}
{
  <ESCOPOPARAMB> Expression() <ESCOPOPARAME>
}

void EscopoFuncao(): {}
{
  <ESCOPOFUNCAOB> (If() | While() | Assignment())* <ESCOPOFUNCAOE> }

// -----------------------------------------------
// Actions
// -----------------------------------------------

void If(): {}
{
  <IF> EscopoParam() (EscopoFuncao() | Expression()) [<ELSE> (EscopoFuncao()| Expression())]
}

void While(): {}
{
  <WHILE> EscopoParam() EscopoFuncao()
}

// -----------------------------------------------
// Expressions
// -----------------------------------------------

void Assignment(): {}
{
  <VAR> (<ASSIGNMENTEQ>
| <ASSIGNMENTEP> | <ASSIGNMENTEL> | <ASSIGNMENTEM> | <ASSIGNMENTDIV> | <ASSIGNMENTEMOD> | <ASSIGNMENTELEV>)Expression()
}

void Expression(): {}
{
  BinaryExp() [<QUESTION> BinaryExp() <COLON> BinaryExp()]
}

void BinaryExp(): {}
{
   UnaryExp() [<LOGICALEXPSYMBOL> UnaryExp()]
}

void UnaryExp(): {}
{
  [<UNARYEXPSYMBOLBEFORE>] Parenthesis() [<UNARYEXPSYMBOL>]
}

void Parenthesis(): {}
{
  (<ESCOPOPARAMB> Expression() <ESCOPOPARAME> | <INT> | <VAR> | <FLOAT>)
}

