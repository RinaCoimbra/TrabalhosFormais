options
{
  JDK_VERSION = "1.5";
  static = true; 
}

PARSER_BEGIN(AWK)

import java.util.*;

public class AWK {

  /* Print tokens */
  public static ArrayList<TokenType> tokenTypeList = new ArrayList<TokenType>();

  public static void addToken (Token token, String type) {

    tokenTypeList.add (new TokenType (token, type));
  }

  /* Main */
  public static void main (String args []) throws ParseException  {

    new AWK(System.in);
    System.out.println("Reading from standard input...");
    
    int i = 0;
    int ok = AWK.Start();
    if (ok == 1) System.out.println("Ok!");

    for (TokenType token : tokenTypeList) {
      System.out.println((++i) + "\t "+token.type+" \t "+token.token.toString());
      /*
      for (Iterator i = tokenTypeList.iterator(); i.hasNext();) {
        System.out.println(i.next());
      }
      */
    }

    System.out.println("SUCESS");
  }
}

PARSER_END(AWK)

SKIP :
{ " " | "\r" | "\t" | "\n" | <"#"(~["\n"])+> }

// -----------------------------------------------
// Tokens
// -----------------------------------------------

TOKEN :
{
  // Special patterns

    < BEGINFUNCAO: "BEGIN" >
  | < ENDFUNCAO:   "END" >

  // Scope 

  | < ESCOPOFUNCAOB: "{"  >
  | < ESCOPOFUNCAOE: "}" >
  | < ESCOPOPARAMB: "(" >
  | < ESCOPOPARAME: ")" >
  | < ESCOPOVECTORB: "[" >
  | < ESCOPOVECTORE: "]" >

  // Control statements

  | < IF: "if" >
  | < ELSE: "else" >
  | < WHILE: "while" >
  | < DO: "do" >
  | < FOR: "for" >
  | < BREAK: "break" >
  | < EXIT: "exit" >
  | < CONTINUE: "continue" >
  | < DELETE: "delete" >

  // Pontuacoes

  | < PONTOVIRGULA: ";" >
  | < VIRGULA: "," >

  // Numeric functions

  | < ARCTAN: "atan2" >
  | < COS: "cos" >
  | < NFEXP: "exp" >
  | < NFINT: "int" >
  | < LOG: "log" >
  | < RAND: "rand" >
  | < SIN: "sin" >
  | < SQRT: "sqrt" >
  | < SRAND: "srand" >

  // String functions

  | < ASORT: "asort" >
  | < ASORTI: "asorti" >
  | < INDEX: "index" >
  | < LENGTH: "length" >
  | < SPLIT: "split" >
  | < STRTONUM: "strtonum" >
  | < SUBSTR: "substr" >
  | < TOLOWER: "tolower" >
  | < TOUPPER: "toupper" >

  // I/O Statements

  | < GETLINE: "getline" >
  | < PRINT: "print" >

  // Built-ins

  | < BUILTIN: ("ARGC" | "ARGIND" | "ARGV" | "BINMODE" | "CONVFMT" | "ENVIRON" | "ERRNO" | "FIELDWIDTHS" | "FILENAME" | "FNR" | "FS" | "IGNORECASE" | "LINT" | "NF" | "NR" | "OFMT" | "OFS" | "ORS" | "PROCINFO" | "RS" | "RT" | "RSTART" | "RLENGHT" | "SUBSEP" | "TEXTDOMAIN")>

  // Expressoes

  | < QUESTION: "?">
  | < COLON: ":">
  | < ASSIGNMENTEQ : "=">
  | < ASSIGNMENTEP : "+=">
  | < ASSIGNMENTEL : "-=">
  | < ASSIGNMENTEM : "*=">
  | < ASSIGNMENTDIV : "/=">
  | < ASSIGNMENTEMOD : "%=">
  | < ASSIGNMENTELEV: "^=">
  | < LOGICALOR: "||">
  | < LOGICALAND: "&&">
  | < OPVETORIN: "in"> // FALTA FAZER
  | < OPLESS: "<">
  | < OPMORE: ">">
  | < OPLESSEQ: "<=">
  | < OPMOREEQ: ">=">
  | < OPDIFF: "!=">
  | < EQEQ: "=="> 
  | < PIPE1 : "|">  // PERGUNTAR COMO FAZ O SPACE DE CONCATENACAO DE STRING
  | < PIPE2 : "|&"> // PERGUNTAR SE EH SOH PRA GETLINE
  | < ADD: "+">
  | < SUB: "-">
  | < MULT: "*">
  | < DIV: "/">
  | < MOD: "%">
  | < EXP: "^">
  | < LOGICALNOT: "!">
  | < INCREMENT: "++">
  | < DECREMENT: "--">
  | < FDREF: "$">

  // Tipos

  | < INTEGER: (["0"-"9"])+>
  | < FLOAT: (["0"-"9"])+("." ((["0"-"9"])+))?>
  | < VAR: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])*>
  | < STRING: "\""(~["\""])+ "\"">
}

// -----------------------------------------------
// Special patterns
// -----------------------------------------------

int Start(): {}
{
  (Pattern())* (Begin() | Middle() | End()) <EOF> { return 1; }
}

void Begin(): { Token token1 = null; }
{    
  (token1 = <BEGINFUNCAO> EscopoStatement() (Pattern())*)+ [Middle() | End()]

  { if (token1 != null) addToken (token1, "BEGIN\t"); }
}

void Middle(): {}
{    
  (EscopoStatement() (Pattern())*)+ [Begin() | End()]
}

void End(): { Token token1 = null; }
{    
  (token1 = <ENDFUNCAO> EscopoStatement() (Pattern())*)+ [Begin() | Middle()]

  { if (token1 != null) addToken (token1, "END\t"); }
}

void Pattern(): { Token token1 = null; }
{
  (Procurador() (token1 = <VIRGULA> Procurador())*) | NumericFunctions() | StringFunctions() | Iostatement()

  { if (token1 != null) addToken (token1, "VIRGULA\t"); }
}

// -----------------------------------------------
// Scope
// -----------------------------------------------

void EscopoParam(): { Token token1 = null, token2 = null; }
{
  token1 = <ESCOPOPARAMB> (Procurador()) token2 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "ESCOPOPARAMB\t"); }
  { if (token1 != null) addToken (token2, "ESCOPOPARAME\t"); }
}

void EscopoParamFor(): { Token token1 = null, token2 = null, token3 = null, token4 = null; }
{
  token1 = <ESCOPOPARAMB> (Procurador())* token2 = <PONTOVIRGULA> (Procurador())* token3 = <PONTOVIRGULA> (Procurador())* token4 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "ESCOPOPARAMB\t"); }
  { if (token2 != null) addToken (token2, "PONTOVIRGULA\t"); }
  { if (token3 != null) addToken (token3, "PONTOVIRGULA\t"); }
  { if (token4 != null) addToken (token4, "ESCOPOPARAME\t"); }
}

void ConteudoStatement(): {}
{
  If() | DoWhile() | While() | For() | Procurador() | Delete() | NumericFunctions() | StringFunctions() | Iostatement() | <EXIT>
}

void EscopoStatement(): { Token token1 = null, token2 = null; }
{
  token1 = <ESCOPOFUNCAOB> (ConteudoStatement())* token2 = <ESCOPOFUNCAOE>

  { if (token1 != null) addToken (token1, "ESCOPOFUNCAOB\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOFUNCAOE\t"); }
}
 
void EscopoStatementControl(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <ESCOPOFUNCAOB> (ConteudoStatement() | token2 = <BREAK> )* token3 = <ESCOPOFUNCAOE>

  { if (token1 != null) addToken (token1, "ESCOPOFUNCAOB\t"); }
  { if (token2 != null) addToken (token2, "BREAK\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOFUNCAOE\t"); }
}

void EscopoStatementLoop(): { Token token1 = null, token2 = null, token3 = null, token4 = null; }
{
  token1 = <ESCOPOFUNCAOB> (ConteudoStatement() | token2 = <CONTINUE> | token3 = <BREAK> )* token4 = <ESCOPOFUNCAOE>

  { if (token1 != null) addToken (token1, "ESCOPOFUNCAOB\t"); }
  { if (token2 != null) addToken (token2, "CONTINUE\t"); }
  { if (token3 != null) addToken (token3, "BREAK\t"); }
  { if (token4 != null) addToken (token4, "ESCOPOFUNCAOE\t"); }
}

// -----------------------------------------------
// Actions
// -----------------------------------------------

void Vector(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null, token6 = null, token7 = null; }
{
  token1 = <ESCOPOVECTORB> (Lvalue() | token2 = <INTEGER> | token3 = <FLOAT>) (token4 = <VIRGULA> (Lvalue() | token5 = <INTEGER> | token6 = <FLOAT>))* token7 = <ESCOPOVECTORE>

  { if (token1 != null) addToken (token1, "ESCOPOVECTORB\t"); }
  { if (token2 != null) addToken (token2, "INTEGER\t"); }
  { if (token3 != null) addToken (token3, "FLOAT\t"); }
  { if (token4 != null) addToken (token4, "VIRGULA\t"); }
  { if (token5 != null) addToken (token5, "INTEGER\t"); }
  { if (token6 != null) addToken (token6, "FLOAT\t"); }
  { if (token7 != null) addToken (token7, "ESCOPOVECTORE\t"); }
}

void If(): { Token token1 = null, token2 = null; }
{
  token1 = <IF> EscopoParam() (EscopoStatementControl() | Procurador()) [token2 = <ELSE> (EscopoStatementControl()| Procurador())]

  { if (token1 != null) addToken (token1, "IF\t"); }
  { if (token2 != null) addToken (token2, "ELSE\t"); }
}

void DoWhile(): { Token token1 = null, token2 = null; }
{
  token1 = <DO> EscopoStatementLoop() token2 = <WHILE> EscopoParam()

  { if (token1 != null) addToken (token1, "DO\t"); }
  { if (token2 != null) addToken (token2, "WHILE\t"); }
}

void While(): { Token token1 = null; }
{
  token1 = <WHILE> EscopoParam() EscopoStatementLoop()

  { if (token1 != null) addToken (token1, "WHILE\t"); }
}

void For(): { Token token1 = null; }
{
  token1 = <FOR> EscopoParamFor() EscopoStatementLoop()

  { if (token1 != null) addToken (token1, "FOR\t"); }
}

void Delete(): { Token token1 = null; }
{
  token1 = <DELETE> Lvalue() [Vector()]

  { if (token1 != null) addToken (token1, "DELETE\t"); }
}

// -----------------------------------------------
// Numeric Functions
// -----------------------------------------------

void NumericFunctions(): {}
{
  Arctan() | Cos() | Exp() | Int() | Log() | Rand() | Sin() | Sqrt() | Srand()
}

void Arctan(): { Token token1 = null, token2 = null, token3 = null, token4 = null; }
{
  token1 = <ARCTAN> token2 = <ESCOPOPARAMB> Procurador() token3 = <VIRGULA> Procurador() token4 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "ARCTAN\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "VIRGULA\t"); }
  { if (token4 != null) addToken (token4, "ESCOPOPARAME\t"); }
}

void Cos(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <COS> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "COS\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Exp(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <NFEXP> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "NFEXP\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Int(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <NFINT> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "NFINT\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Log(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <LOG> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "LOG\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Rand(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <RAND> token2 = <ESCOPOPARAMB> token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "RAND\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Sin(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <SIN> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "SIN\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Sqrt(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <SQRT> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "SQRT\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Srand(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <SRAND> token2 = <ESCOPOPARAMB> (Procurador())* token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "SRAND\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

// -----------------------------------------------
// String Functions
// -----------------------------------------------

void StringFunctions(): {}
{
  Asort() | Asorti() | Index() | Length() | Split() | Strtonum() | Substr() | Tolower() | Toupper()
}

void Asort(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null, token6 = null; }
{
  token1 = <ASORT> token2 = <ESCOPOPARAMB> (token3 = <STRING> | Lvalue()) [token4 = <VIRGULA> (token5 = <STRING> | Lvalue())] token6 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "ASORT\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "STRING\t"); }
  { if (token4 != null) addToken (token4, "VIRGULA\t"); }
  { if (token5 != null) addToken (token5, "STRING\t"); }
  { if (token6 != null) addToken (token6, "ESCOPOPARAME\t"); }
}

void Asorti(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null, token6 = null; }
{
  token1 = <ASORTI> token2 = <ESCOPOPARAMB> (token3 = <STRING> | Lvalue()) [token4 = <VIRGULA> (token5 = <STRING> | Lvalue())] token6 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "ASORTI\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "STRING\t"); }
  { if (token4 != null) addToken (token4, "VIRGULA\t"); }
  { if (token5 != null) addToken (token5, "STRING\t"); }
  { if (token6 != null) addToken (token6, "ESCOPOPARAME\t"); }
}

void Index(): { Token token1 = null, token2 = null, token3 = null, token4 = null; }
{
  token1 = <INDEX> token2 = <ESCOPOPARAMB> Procurador() token3 = <VIRGULA> Procurador() token4 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "INDEX\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "VIRGULA\t"); }
  { if (token4 != null) addToken (token4, "ESCOPOPARAME\t"); }
}

void Length(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <LENGTH> token2 = <ESCOPOPARAMB> [Procurador()] token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "LENGTH\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Split(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null; }
{
  token1 = <SPLIT> token2 = <ESCOPOPARAMB> Procurador() token3 = <VIRGULA> (Lvalue() | token4 = <STRING>) token5 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "SPLIT\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "VIRGULA\t"); }
  { if (token4 != null) addToken (token4, "STRING\t"); }
  { if (token5 != null) addToken (token5, "ESCOPOPARAME\t"); }
}

void Strtonum(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <STRTONUM> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "STRTONUM\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Substr(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null; }
{
  token1 = <SUBSTR> token2 = <ESCOPOPARAMB> Procurador() token3 = <VIRGULA> Procurador() [token4 = <VIRGULA> Procurador()] token5 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "SUBSTR\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "VIRGULA\t"); }
  { if (token4 != null) addToken (token4, "VIRGULA\t"); }
  { if (token5 != null) addToken (token5, "ESCOPOPARAME\t"); }
}

void Tolower(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <TOLOWER> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "TOLOWER\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

void Toupper(): { Token token1 = null, token2 = null, token3 = null; }
{
  token1 = <TOUPPER> token2 = <ESCOPOPARAMB> Procurador() token3 = <ESCOPOPARAME>

  { if (token1 != null) addToken (token1, "TOUPPER\t"); }
  { if (token2 != null) addToken (token2, "ESCOPOPARAMB\t"); }
  { if (token3 != null) addToken (token3, "ESCOPOPARAME\t"); }
}

// -----------------------------------------------
// I/O Statements
// -----------------------------------------------

void Iostatement(): {}
{
  Getline() | Print()
}

void Getline(): { Token token1 = null; }
{
  token1 = <GETLINE>

  { if (token1 != null) addToken (token1, "GETLINE\t"); }
}

void Print(): { Token token1 = null; }
{
  token1 = <PRINT>

  { if (token1 != null) addToken (token1, "PRINT\t"); }
}

// -----------------------------------------------
// Expressions
// -----------------------------------------------

void Gambiarra1(): { Token token1 = null, token2 = null; }
{
  (token1 = <INTEGER> | token2 = <FLOAT>) [ProcExp()]

  { if (token1 != null) addToken (token1, "INTEGER\t"); }
  { if (token2 != null) addToken (token2, "FLOAT\t"); }
}

void Gambiarra2(): {}
{
  Lvalue() [Vector()] [(AssignmentOperator() Expression()) | ProcExp()]
}

void Procurador(): {}
{
  Gambiarra1() | Gambiarra2()
}

void ProcExp(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null, token6 = null, token7 = null, token8 = null, token9 = null, token10 = null, token11 = null, token12 = null, token13 = null, token14 = null, token15 = null, token16 = null; }
{
    (token1 = <QUESTION> Expression() token2 = <COLON> Expression()) 
  | (token3 = <LOGICALOR> Expression()) | (token4 = <LOGICALAND> Expression()) | ((token5 = < OPLESS>  | token6 = < OPMORE>  | token7 = < OPLESSEQ>  | token8 = < OPMOREEQ>  | token9 = < OPDIFF>  | token10 = < EQEQ> ) Expression()) | ((token11 = <ADD>| token12 = <SUB>) Expression()) | ((token13 = <MULT>|token14 = <DIV>| token15 = <MOD>) Expression())|(token16 = <EXP> Expression())

  { if (token1 != null) addToken (token1, "QUESTION\t"); }
  { if (token2 != null) addToken (token2, "COLON\t"); }
  { if (token3 != null) addToken (token3, "LOGICALOR\t"); }
  { if (token4 != null) addToken (token4, "LOGICALAND\t"); }
  { if (token5 != null) addToken (token5, "OPLESS\t"); }
  { if (token6 != null) addToken (token6, "OPMORE\t"); }
  { if (token7 != null) addToken (token7, "OPLESSEQ\t"); }
  { if (token8 != null) addToken (token8, "OPMOREEQ\t"); }
  { if (token9 != null) addToken (token9, "OPDIFF\t"); }
  { if (token10 != null) addToken (token10, "EQEQ\t"); }
  { if (token11 != null) addToken (token11, "ADD\t"); }
  { if (token12 != null) addToken (token12, "SUB\t"); }
  { if (token13 != null) addToken (token13, "MULT\t"); }
  { if (token14 != null) addToken (token14, "DIV\t"); }
  { if (token15 != null) addToken (token15, "MOD\t"); }
  { if (token16 != null) addToken (token16, "EXP\t"); }
}

void AssignmentOperator(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null, token6 = null, token7 = null; }
{
  token1 = <ASSIGNMENTEQ> | token2 = <ASSIGNMENTEP> | token3 = <ASSIGNMENTEL> | token4 = <ASSIGNMENTEM> | token5 = <ASSIGNMENTDIV> | token6 = <ASSIGNMENTEMOD> | token7 = <ASSIGNMENTELEV>

  { if (token1 != null) addToken (token1, "ASSIGNMENTEQ\t"); }
  { if (token2 != null) addToken (token2, "ASSIGNMENTEP\t"); }
  { if (token3 != null) addToken (token3, "ASSIGNMENTEL\t"); }
  { if (token4 != null) addToken (token4, "ASSIGNMENTEM\t"); }
  { if (token5 != null) addToken (token5, "ASSIGNMENTDIV\t"); }
  { if (token6 != null) addToken (token6, "ASSIGNMENTEMOD\t"); }
  { if (token7 != null) addToken (token7, "ASSIGNMENTELEV\t"); }
}

void Expression(): { Token token1 = null, token2 = null; }
{
  LogicalORExp() [(token1 = <QUESTION> LogicalORExp() token2 = <COLON> LogicalORExp())+]

  { if (token1 != null) addToken (token1, "QUESTION\t"); }
  { if (token2 != null) addToken (token2, "COLON\t"); }
}

void LogicalORExp(): { Token token1 = null; }
{
  LogicalANDExp() [(token1 = <LOGICALOR> LogicalANDExp())+]
    
  { if (token1 != null) addToken (token1, "LOGICALOR\t"); }
}

void LogicalANDExp(): { Token token1 = null; }
{
  BinaryExp() [(token1 = <LOGICALAND> BinaryExp())+]
    
  { if (token1 != null) addToken (token1, "LOGICALAND\t"); }
}

void BinaryExp(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null, token6 = null; }
{
   AddSub() [((token1 = < OPLESS>  | token2 = < OPMORE>  | token3 = < OPLESSEQ>  | token4 = < OPMOREEQ>  | token5 = < OPDIFF>  | token6 = < EQEQ> ) AddSub())+]

  { if (token1 != null) addToken (token1, "OPLESS\t"); }
  { if (token2 != null) addToken (token2, "OPMORE\t"); }
  { if (token3 != null) addToken (token3, "OPLESSEQ\t"); }
  { if (token4 != null) addToken (token4, "OPMOREEQ\t"); }
  { if (token5 != null) addToken (token5, "OPDIFF\t"); }
  { if (token6 != null) addToken (token6, "EQEQ\t"); }
}

void AddSub(): { Token token1 = null, token2 = null; }
{
  MultDiv() [ ((token1 = <ADD>| token2 = <SUB>) MultDiv())+]

  { if (token1 != null) addToken (token1, "ADD\t"); }
  { if (token2 != null) addToken (token2, "SUB\t"); }
}

void MultDiv(): { Token token1 = null, token2 = null, token3 = null; }
{
  Exponential() [((token1 = <MULT>|token2 = <DIV>| token3 = <MOD>) Exponential())+]

  { if (token1 != null) addToken (token1, "MULT\t"); }
  { if (token2 != null) addToken (token2, "DIV\t"); }
  { if (token3 != null) addToken (token3, "MOD\t"); }
}

void Exponential(): { Token token1 = null; }
{
  PossibleTokens()[(token1 = <EXP> PossibleTokens())+]
  
  { if (token1 != null) addToken (token1, "EXP\t"); }
}

void PossibleTokens(): { Token token1 = null, token2 = null, token3 = null, token4 = null, token5 = null, token6 = null, token7 = null, token8 = null; }
{
  (token1 = <INCREMENT> | token2 = <DECREMENT>) [Prefixos()] (token3 = <INTEGER> | (Lvalue() [Vector()])| token4 = <FLOAT>)
  |  [Prefixos()] (token5 = <INTEGER> | (Lvalue() [Vector()])| token6 = <FLOAT>) [token7 = <INCREMENT> | token8 = <DECREMENT>]

  { if (token1 != null) addToken (token1, "INCREMENT\t"); }
  { if (token2 != null) addToken (token2, "DECREMENT\t"); }
  { if (token3 != null) addToken (token3, "INTEGER\t"); }
  { if (token4 != null) addToken (token4, "FLOAT\t"); }
  { if (token5 != null) addToken (token5, "INTEGER\t"); }
  { if (token6 != null) addToken (token6, "FLOAT\t"); }
  { if (token7 != null) addToken (token7, "INCREMENT\t"); }
  { if (token8 != null) addToken (token8, "DECREMENT\t"); }
}

void Prefixos(): { Token token1 = null, token2 = null, token3 = null, token4 = null; }
{
  (token1 = <ADD> | token2 = <SUB> | token3 = <LOGICALNOT>) [token4 = <FDREF>]

  { if (token1 != null) addToken (token1, "ADD\t"); }
  { if (token2 != null) addToken (token2, "SUB\t"); }
  { if (token3 != null) addToken (token3, "LOGICALNOT\t"); }
  { if (token4 != null) addToken (token4, "FDREF\t"); }
}

// void IncDec(): {}
// {
//   ([<INCREMENT> | <DECREMENT>] Parenthesis()) | ( Parenthesis() [<INCREMENT> | <DECREMENT>] )
// }

// void Parenthesis(): {}
// {
//   (<ESCOPOPARAMB> Expression() <ESCOPOPARAME> | <INTEGER> | Lvalue() | <FLOAT>)
// }


// -----------------------------------------------
// Lvalue
// -----------------------------------------------

void Lvalue(): { Token token1 = null, token2 = null; }
{
  token1 = <VAR> | token2 = <BUILTIN>

  { if (token1 != null) addToken (token1, "VAR\t"); }
  { if (token2 != null) addToken (token2, "BUILTIN\t"); }
}